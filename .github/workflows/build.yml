name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          #- os: ubuntu-latest
          #  target: x86_64-unknown-linux-gnu
          #  artifact_name: seal-linux-x86_64
          #  asset_name: seal-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: seal-linux-x86_64-musl
            asset_name: seal-linux-x86_64-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: seal-windows-x86_64.exe
            asset_name: seal-windows-x86_64.exe
          #- os: macos-latest
          #  target: x86_64-apple-darwin
          #  artifact_name: seal-macos-x86_64
          #  asset_name: seal-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: seal-macos-arm64
            asset_name: seal-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          sudo apt-get install -y musl-tools
        fi

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config

    - name: Build
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Download ffmpeg for Linux (musl/x86_64)
      if: matrix.os == 'ubuntu-latest'
      run: |
        set -e
        sudo apt-get update
        sudo apt-get install -y xz-utils tar curl
        FF_DIR=$(mktemp -d)
        URL="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
        echo "Downloading $URL"
        curl -L -o "$FF_DIR/ffmpeg.tar.xz" "$URL"
        tar -xf "$FF_DIR/ffmpeg.tar.xz" -C "$FF_DIR"
        # Get the first directory in the unzip result
        INNER=$(find "$FF_DIR" -maxdepth 1 -type d -name "ffmpeg-*-amd64-static" | head -n1)
        if [ -z "$INNER" ]; then echo "Cannot locate unpacked ffmpeg dir"; exit 1; fi
        mkdir -p target/${{ matrix.target }}/release
        cp "$INNER/ffmpeg" target/${{ matrix.target }}/release/ffmpeg || true
        cp "$INNER/ffprobe" target/${{ matrix.target }}/release/ffprobe || true
        ls -l target/${{ matrix.target }}/release/

    - name: Download ffmpeg for macOS (aarch64)
      if: matrix.os == 'macos-latest'
      run: |
        set -e
        FF_DIR=$(mktemp -d)
        URL="https://www.osxexperts.net/ffmpeg7arm.zip"
        echo "Downloading $URL"
        curl -L -o "$FF_DIR/ffmpeg.zip" "$URL"
        unzip -q "$FF_DIR/ffmpeg.zip" -d "$FF_DIR"
        # Try to find ffmpeg executable in the unzip result
        CAND=$(find "$FF_DIR" -type f -name "ffmpeg" | head -n1)
        if [ -z "$CAND" ]; then echo "Cannot locate ffmpeg binary in zip"; exit 1; fi
        mkdir -p target/${{ matrix.target }}/release
        cp "$CAND" target/${{ matrix.target }}/release/ffmpeg || true
        # Some mac packages don't include ffprobe
        CAND_PROBE=$(find "$FF_DIR" -type f -name "ffprobe" | head -n1)
        if [ -n "$CAND_PROBE" ]; then cp "$CAND_PROBE" target/${{ matrix.target }}/release/ffprobe || true; fi
        ls -l target/${{ matrix.target }}/release/

    - name: Download ffmpeg for Windows (x86_64)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        $url = 'https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip'
        $ffdir = New-Item -ItemType Directory -Path ([System.IO.Path]::GetTempPath()) -Name (New-Guid).Guid
        $zip = Join-Path $ffdir 'ffmpeg.zip'
        Invoke-WebRequest -Uri $url -OutFile $zip
        Expand-Archive -Path $zip -DestinationPath $ffdir
        $inner = Get-ChildItem -Path $ffdir -Directory | Where-Object { $_.Name -like 'ffmpeg-*' } | Select-Object -First 1
        if (-not $inner) { throw 'Cannot locate unpacked ffmpeg dir' }
        New-Item -ItemType Directory -Force -Path "target/${{ matrix.target }}/release" | Out-Null
        Copy-Item -Path (Join-Path $inner.FullName 'bin/ffmpeg.exe') -Destination "target/${{ matrix.target }}/release/ffmpeg.exe" -Force
        Copy-Item -Path (Join-Path $inner.FullName 'bin/ffprobe.exe') -Destination "target/${{ matrix.target }}/release/ffprobe.exe" -Force
        Get-ChildItem "target/${{ matrix.target }}/release"

    - name: Run tests
      if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-pc-windows-msvc' || matrix.target == 'x86_64-apple-darwin'
      run: |
        cargo test --target ${{ matrix.target }}

    - name: Prepare artifact (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/seal ${{ matrix.artifact_name }}
        strip ${{ matrix.artifact_name }} || true

    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\seal.exe ${{ matrix.artifact_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}
        retention-days: 30

  create-checksums:
    name: Create checksums
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create checksums
      run: |
        cd artifacts
        find . -type f -exec sha256sum {} \; > ../checksums.txt
        cat ../checksums.txt

    - name: Upload checksums
      uses: actions/upload-artifact@v4
      with:
        name: checksums
        path: checksums.txt

  release:
    name: Create Release
    needs: [build, create-checksums]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        find artifacts -type f -name "seal-*" -exec cp {} release/ \;
        cp artifacts/checksums/checksums.txt release/
        ls -la release/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check:
    name: Check code quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items