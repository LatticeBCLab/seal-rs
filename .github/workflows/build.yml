name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: seal-linux-x86_64
            asset_name: seal-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: seal-linux-x86_64-musl
            asset_name: seal-linux-x86_64-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: seal-windows-x86_64.exe
            asset_name: seal-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: seal-macos-x86_64
            asset_name: seal-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: seal-macos-arm64
            asset_name: seal-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          sudo apt-get install -y musl-tools
        fi

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config

    - name: Build
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Run tests
      if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-pc-windows-msvc' || matrix.target == 'x86_64-apple-darwin'
      run: |
        cargo test --target ${{ matrix.target }}

    - name: Prepare artifact (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/seal ${{ matrix.artifact_name }}
        strip ${{ matrix.artifact_name }} || true

    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\seal.exe ${{ matrix.artifact_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}
        retention-days: 30

  create-checksums:
    name: Create checksums
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create checksums
      run: |
        cd artifacts
        find . -type f -exec sha256sum {} \; > ../checksums.txt
        cat ../checksums.txt

    - name: Upload checksums
      uses: actions/upload-artifact@v4
      with:
        name: checksums
        path: checksums.txt

  release:
    name: Create Release
    needs: [build, create-checksums]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        find artifacts -type f -name "seal-*" -exec cp {} release/ \;
        cp artifacts/checksums/checksums.txt release/
        ls -la release/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check:
    name: Check code quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items